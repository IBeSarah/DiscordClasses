name: Comment Class Diff

on:
  push:
    branches:
      - main
    paths:
      - discordclasses.json   # Only trigger when this file changes

jobs:
  post-diff:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Needed to compare with previous commit

      # Step 2: Extract current and previous JSON
      - name: Set up JSON files
        run: |
          git show HEAD:discordclasses.json > current.json || echo '{}' > current.json
          git show HEAD^:discordclasses.json > previous.json || echo '{}' > previous.json

      # Step 3: Install Node dependencies
      - name: Install Node dependencies
        run: npm install lodash fast-levenshtein axios

      # Step 4: Run diff script and post to Discord
      - name: Post diff to Discord
        run: node diff_and_post.js
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}

      # Step 5: Post full diff as GitHub commit comment
      - name: Post full diff to GitHub
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const MAX_COMMENT_LENGTH = 65000;
            const diffFile = 'full_diff.txt';

            // Ensure file exists
            if (!fs.existsSync(diffFile)) {
              console.log("No diff file found.");
              return;
            }

            const diffText = fs.readFileSync(diffFile, 'utf8');
            if (!diffText.trim()) {
              console.log("Diff file is empty, nothing to post.");
              return;
            }

            // Split text into chunks if too long
            function splitText(text, maxLength) {
              const chunks = [];
              let start = 0;
              while (start < text.length) {
                chunks.push(text.slice(start, start + maxLength));
                start += maxLength;
              }
              return chunks;
            }

            const chunks = splitText(diffText, MAX_COMMENT_LENGTH);

            for (let i = 0; i < chunks.length; i++) {
              const body = chunks.length > 1
                ? `**Part ${i + 1} of ${chunks.length}**\n\n${chunks[i]}`
                : chunks[i];

              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body,
              });

              console.log(`Posted GitHub comment part ${i + 1}/${chunks.length}`);
            }
