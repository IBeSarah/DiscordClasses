name: post-diff

on:
  push:
    paths:
      - 'discordclasses.json'

jobs:
  post-diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 300

      - name: Get current and previous file content
        run: |
          git show HEAD:discordclasses.json > current.json
          git show HEAD^:discordclasses.json > previous.json || echo '{}' > previous.json

      - name: Post diff comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const current = JSON.parse(fs.readFileSync('current.json', 'utf-8'));
            const previous = JSON.parse(fs.readFileSync('previous.json', 'utf-8'));

            function escapeValue(val) {
              if (typeof val === 'string') {
                return val.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
              }
              return val;
            }

            function detectModuleChanges(prev, curr) {
              const renames = [];
              const addedModules = [];
              const removedModules = [];

              const prevKeys = Object.keys(prev);
              const currKeys = Object.keys(curr);

              const matchedCurr = new Set();
              const matchedPrev = new Set();

              for (const oldKey of prevKeys) {
                for (const newKey of currKeys) {
                  if (oldKey !== newKey && !matchedCurr.has(newKey)) {
                    const prevObj = prev[oldKey];
                    const currObj = curr[newKey];
                    if (typeof prevObj === 'object' && typeof currObj === 'object' &&
                        JSON.stringify(Object.keys(prevObj).sort()) === JSON.stringify(Object.keys(currObj).sort())) {
                      renames.push({ from: oldKey, to: newKey, prevObj: prevObj, currObj: currObj });
                      matchedCurr.add(newKey);
                      matchedPrev.add(oldKey);
                    }
                  }
                }
              }

              for (const newKey of currKeys) {
                if (!matchedCurr.has(newKey) && !prevKeys.includes(newKey)) {
                  addedModules.push({ id: newKey, obj: curr[newKey] });
                }
              }

              for (const oldKey of prevKeys) {
                if (!matchedPrev.has(oldKey) && !currKeys.includes(oldKey)) {
                  removedModules.push({ id: oldKey, obj: prev[oldKey] });
                }
              }

              return { renames: renames, addedModules: addedModules, removedModules: removedModules };
            }

            function diffModule(prevObj, currObj) {
              const added = [];
              const removed = [];
              const renamed = [];

              const keys = new Set(Object.keys(prevObj).concat(Object.keys(currObj)));
              for (const k of keys) {
                const oldVal = prevObj[k];
                const newVal = currObj[k];

                if (oldVal === undefined) {
                  added.push({ key: k, val: newVal });
                } else if (newVal === undefined) {
                  removed.push({ key: k, val: oldVal });
                } else if (oldVal !== newVal) {
                  renamed.push({ key: k, oldVal: oldVal, newVal: newVal });
                }
              }

              return { added: added, removed: removed, renamed: renamed };
            }

            function formatModuleDiff(title, moduleId, changes, autoExpand) {
              if (autoExpand === undefined) autoExpand = true;

              const addedCount = changes.added ? changes.added.length : 0;
              const removedCount = changes.removed ? changes.removed.length : 0;
              const renamedCount = changes.renamed ? changes.renamed.length : 0;
              const totalCount = addedCount + removedCount + renamedCount;
              const shouldExpand = autoExpand && totalCount <= 20;

              const parts = [];
              if (addedCount) parts.push(addedCount + " added");
              if (removedCount) parts.push(removedCount + " removed");
              if (renamedCount) parts.push(renamedCount + " renamed");
              const summaryCounts = parts.length ? " (" + parts.join(", ") + ")" : "";

              let output = "<details" + (shouldExpand ? " open" : "") + ">\n";
              output += "<summary>" + title + " module " + moduleId + summaryCounts + "</summary>\n\n";

              if (addedCount) {
                output += "#### Added in " + moduleId + "\n```diff\n";
                for (let i = 0; i < changes.added.length; i++) {
                  const a = changes.added[i];
                  output += "+ \"" + a.key + "\": \"" + escapeValue(a.val) + "\"\n";
                }
                output += "```\n\n";
              }

              if (removedCount) {
                output += "#### Removed from " + moduleId + "\n```diff\n";
                for (let i = 0; i < changes.removed.length; i++) {
                  const r = changes.removed[i];
                  output += "- \"" + r.key + "\": \"" + escapeValue(r.val) + "\"\n";
                }
                output += "```\n\n";
              }

              if (renamedCount) {
                output += "#### Renamed in " + moduleId + "\n```diff\n";
                for (let i = 0; i < changes.renamed.length; i++) {
                  const rn = changes.renamed[i];
                  output += "- \"" + rn.key + "\": \"" + escapeValue(rn.oldVal) + "\"\n";
                  output += "+ \"" + rn.key + "\": \"" + escapeValue(rn.newVal) + "\"\n";
                }
                output += "```\n\n";
              }

              output += "</details>\n\n";
              return output;
            }

            function formatPureRename(from, to) {
              return "<details open>\n<summary>Renamed module " + from + " to " + to + " (no internal changes)</summary>\n\n</details>\n\n";
            }

            const { renames, addedModules, removedModules } = detectModuleChanges(previous, current);

            let commentBody = "";

            for (let i = 0; i < renames.length; i++) {
              const r = renames[i];
              const changes = diffModule(r.prevObj, r.currObj);
              if (changes.added.length === 0 && changes.removed.length === 0 && changes.renamed.length === 0) {
                commentBody += formatPureRename(r.from, r.to);
              } else {
                commentBody += formatModuleDiff("Renamed", r.to, changes);
              }
            }

            for (let i = 0; i < addedModules.length; i++) {
              const m = addedModules[i];
              const added = Object.keys(m.obj).map(function(k){ return { key: k, val: m.obj[k] }; });
              commentBody += formatModuleDiff("Added", m.id, { added: added });
            }

            for (let i = 0; i < removedModules.length; i++) {
              const m = removedModules[i];
              const removed = Object.keys(m.obj).map(function(k){ return { key: k, val: m.obj[k] }; });
              commentBody += formatModuleDiff("Removed", m.id, { removed: removed });
            }

            if (!commentBody) {
              console.log("No changes detected.");
              return;
            }

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: process.env.GITHUB_SHA,
              body: commentBody
            });

            console.log("Diff comment posted successfully.");
