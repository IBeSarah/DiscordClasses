name: Comment Class Diff

on:
  push:
    branches:
      - main
    paths:
      - discordclasses.json

jobs:
  comment-diff:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up JSON files
        run: |
          git show HEAD:discordclasses.json > current.json || echo '{}' > current.json
          git show HEAD^:discordclasses.json > previous.json || echo '{}' > previous.json

      - name: Install Node dependencies
        run: npm install lodash fast-levenshtein axios

      - name: Post diff to Discord
        run: node diff_and_post_discord.js
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}

      - name: Post full diff as GitHub commit comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const _ = require('lodash');
            const MAX_COMMENT_LENGTH = 65536;

            const prev = JSON.parse(fs.readFileSync('previous.json', 'utf8'));
            const curr = JSON.parse(fs.readFileSync('current.json', 'utf8'));

            const added = [];
            const removed = [];
            const renamed = [];
            const moved = [];

            function diffObjects(oldObj, newObj, path = []) {
              const oldKeys = Object.keys(oldObj);
              const newKeys = Object.keys(newObj);

              // Added keys
              newKeys.forEach(k => {
                if (!oldKeys.includes(k)) {
                  added.push([...path, k].join('.'));
                }
              });

              // Removed keys
              oldKeys.forEach(k => {
                if (!newKeys.includes(k)) {
                  removed.push([...path, k].join('.'));
                }
              });

              // Existing keys
              oldKeys.forEach(k => {
                if (newKeys.includes(k)) {
                  if (_.isObject(oldObj[k]) && _.isObject(newObj[k])) {
                    diffObjects(oldObj[k], newObj[k], [...path, k]);
                  } else if (oldObj[k] !== newObj[k]) {
                    renamed.push([...path, k].join('.'));
                  }
                }
              });
            }

            diffObjects(prev, curr);

            let commentText = '';
            if (removed.length) commentText += '### Removed\n' + removed.map(r => r).join('\n') + '\n';
            if (added.length) commentText += '### Added\n' + added.map(a => a).join('\n') + '\n';
            if (renamed.length) commentText += '### Renamed\n' + renamed.map(r => r).join('\n') + '\n';
            if (moved.length) commentText += '### Moved\n' + moved.map(m => m).join('\n') + '\n';

            if (!commentText) {
              console.log('No changes detected.');
              return;
            }

            // Split into multiple comments if too large
            function splitText(text, maxLength) {
              const chunks = [];
              let start = 0;
              while (start < text.length) {
                chunks.push(text.slice(start, start + maxLength));
                start += maxLength;
              }
              return chunks;
            }

            const chunks = splitText('```diff\n' + commentText + '\n```', MAX_COMMENT_LENGTH);

            for (let i = 0; i < chunks.length; i++) {
              const body = chunks.length > 1
                ? `**Part ${i + 1} of ${chunks.length}**\n\n${chunks[i]}`
                : chunks[i];

              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body,
              });

              console.log(`Posted GitHub comment part ${i + 1}/${chunks.length}`);
            }
