name: Post Categorized Diff Comments

on:
  push:
    paths:
      - discordclasses.json

jobs:
  post-diff-comments:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 300  # to get previous commits

    - name: Save current discordclasses.json
      run: |
        git show HEAD:discordclasses.json > current.json

    - name: Save previous discordclasses.json (HEAD^)
      run: |
        git show HEAD^:discordclasses.json > previous.json || echo '{}' > previous.json

    - name: Post categorized diff as commit comments
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');

          const previous = JSON.parse(fs.readFileSync('previous.json', 'utf8'));
          const current = JSON.parse(fs.readFileSync('current.json', 'utf8'));

          const MAX_COMMENT_LENGTH = 65536;
          const header = (section) => `### ${section}\n\`\`\`diff\n`;
          const footer = '\n```\n';

          function escapeLine(str) {
            return str.replace(/\r?\n/g, ' ');
          }

          const added = [];
          const removed = [];
          const renamed = [];

          const prevKeys = new Set(Object.keys(previous));
          const currKeys = new Set(Object.keys(current));

          for (const key of currKeys) {
            if (!prevKeys.has(key)) {
              added.push(`+ "${key}": ${JSON.stringify(current[key])}`);
            }
          }

          for (const key of prevKeys) {
            if (!currKeys.has(key)) {
              removed.push(`- "${key}": ${JSON.stringify(previous[key])}`);
            }
          }

          for (const key of prevKeys) {
            if (currKeys.has(key)) {
              const prevVal = JSON.stringify(previous[key]);
              const currVal = JSON.stringify(current[key]);
              if (prevVal !== currVal) {
                renamed.push(
                  `-original : ${key} : ${escapeLine(prevVal)}\n+renamed: ${key} : ${escapeLine(currVal)}`
                );
              }
            }
          }

          const sections = [];

          if (added.length) {
            sections.push({title: 'Added', content: added.join('\n')});
          }
          if (removed.length) {
            sections.push({title: 'Removed', content: removed.join('\n')});
          }
          if (renamed.length) {
            sections.push({title: 'Renamed', content: renamed.join('\n\n')});
          }

          if (sections.length === 0) {
            console.log('No changes to post');
            return;
          }

          const comments = [];
          for (const {title, content} of sections) {
            const baseHeader = `ðŸ§© **Changes in \`discordclasses.json\` - ${title}:**\n\n`;
            const maxContentLength = MAX_COMMENT_LENGTH - baseHeader.length - header(title).length - footer.length;

            const lines = content.split('\n');
            let chunk = '';
            for (const line of lines) {
              if ((chunk + line + '\n').length > maxContentLength) {
                comments.push(baseHeader + header(title) + chunk + footer);
                chunk = '';
              }
              chunk += line + '\n';
            }
            if (chunk.length > 0) {
              comments.push(baseHeader + header(title) + chunk + footer);
            }
          }

          for (let i = 0; i < comments.length; i++) {
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comments[i],
            });
            console.log(`Posted comment ${i + 1} of ${comments.length}`);
          }
