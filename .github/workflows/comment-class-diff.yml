name: post-diff

on:
  push:
    paths:
      - 'discordclasses.json'

jobs:
  post-diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 300

      - name: Get current and previous file content
        run: |
          git show HEAD:discordclasses.json > current.json
          git show HEAD^:discordclasses.json > previous.json || echo '{}' > previous.json

      - name: Post diff comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Load JSON files
            const current = JSON.parse(fs.readFileSync('current.json', 'utf-8'));
            const previous = JSON.parse(fs.readFileSync('previous.json', 'utf-8'));

            // Detect module-level changes: renames, added, removed
            function detectModuleChanges(prev, curr) {
              const renames = [];
              const addedModules = [];
              const removedModules = [];

              const prevKeys = Object.keys(prev);
              const currKeys = Object.keys(curr);

              const matchedCurr = new Set();
              const matchedPrev = new Set();

              // Detect renames
              for (const oldKey of prevKeys) {
                for (const newKey of currKeys) {
                  if (oldKey !== newKey && !matchedCurr.has(newKey)) {
                    const prevObj = prev[oldKey];
                    const currObj = curr[newKey];
                    if (
                      typeof prevObj === 'object' &&
                      typeof currObj === 'object' &&
                      JSON.stringify(Object.keys(prevObj).sort()) === JSON.stringify(Object.keys(currObj).sort())
                    ) {
                      renames.push({ from: oldKey, to: newKey, prevObj, currObj });
                      matchedCurr.add(newKey);
                      matchedPrev.add(oldKey);
                    }
                  }
                }
              }

              // Added modules
              for (const newKey of currKeys) {
                if (!matchedCurr.has(newKey) && !prevKeys.includes(newKey)) {
                  addedModules.push({ id: newKey, obj: curr[newKey] });
                }
              }

              // Removed modules
              for (const oldKey of prevKeys) {
                if (!matchedPrev.has(oldKey) && !currKeys.includes(oldKey)) {
                  removedModules.push({ id: oldKey, obj: prev[oldKey] });
                }
              }

              return { renames, addedModules, removedModules };
            }

            // Compare module contents
            function diffModule(prevObj, currObj) {
              const added = [];
              const removed = [];
              const renamed = [];

              const keys = new Set([...Object.keys(prevObj), ...Object.keys(currObj)]);
              for (const k of keys) {
                const oldVal = prevObj[k];
                const newVal = currObj[k];
                if (oldVal === undefined) {
                  added.push({ key: k, val: newVal });
                } else if (newVal === undefined) {
                  removed.push({ key: k, val: oldVal });
                } else if (oldVal !== newVal) {
                  renamed.push({ key: k, oldVal, newVal });
                }
              }

              return { added, removed, renamed };
            }

            // Format diffs into collapsible markdown with counts
            function formatModuleDiff(title, moduleId, changes, autoExpand = true) {
              const addedCount = changes.added?.length || 0;
              const removedCount = changes.removed?.length || 0;
              const renamedCount = changes.renamed?.length || 0;
              const totalCount = addedCount + removedCount + renamedCount;

              const shouldExpand = autoExpand && totalCount <= 20;

              const parts = [];
              if (addedCount) parts.push(`${addedCount} added`);
              if (removedCount) parts.push(`${removedCount} removed`);
              if (renamedCount) parts.push(`${renamedCount} renamed`);
              const summaryCounts = parts.length ? ` (${parts.join(", ")})` : "";

              let output = `<details${shouldExpand ? " open" : ""}>\n`;
              output += `<summary>${title} module ${moduleId}${summaryCounts}</summary>\n\n`;

              if (addedCount) {
                output += `#### Added in ${moduleId}\n\`\`\`diff\n`;
                for (const a of changes.added) {
                  output += `+ "${a.key}": ${JSON.stringify(a.val)}\n`;
                }
                output += "```\n\n";
              }

              if (removedCount) {
                output += `#### Removed from ${moduleId}\n\`\`\`diff\n`;
                for (const r of changes.removed) {
                  output += `- "${r.key}": ${JSON.stringify(r.val)}\n`;
                }
                output += "```\n\n";
              }

              if (renamedCount) {
                output += `#### Renamed in ${moduleId}\n\`\`\`diff\n`;
                for (const rn of changes.renamed) {
                  output += `- "${rn.key}": ${JSON.stringify(rn.oldVal)}\n`;
                  output += `+ "${rn.key}": ${JSON.stringify(rn.newVal)}\n`;
                }
                output += "```\n\n";
              }

              output += `</details>\n\n`;
              return output;
            }

            function formatPureRename(from, to) {
              return `<details open>\n<summary>Renamed module ${from} to ${to} (no internal changes)</summary>\n\n</details>\n\n`;
            }

            // Build comment
            const { renames, addedModules, removedModules } = detectModuleChanges(previous, current);

            let commentBody = "";

            // Handle module renames
            for (const { from, to, prevObj, currObj } of renames) {
              const changes = diffModule(prevObj, currObj);
              if (changes.added.length === 0 && changes.removed.length === 0 && changes.renamed.length === 0) {
                commentBody += formatPureRename(from, to);
              } else {
                commentBody += `<details>\n<summary>Renamed module ${from} to ${to} (${changes.added.length + changes.removed.length + changes.renamed.length} changes)</summary>\n\n`;
                commentBody += formatModuleDiff("Changes in", to, changes);
                commentBody += `</details>\n\n`;
              }
            }

            // Handle added modules
            for (const { id, obj } of addedModules) {
              const added = Object.entries(obj).map(([k, v]) => ({ key: k, val: v }));
              commentBody += formatModuleDiff("Added", id, { added });
            }

            // Handle removed modules
            for (const { id, obj } of removedModules) {
              const removed = Object.entries(obj).map(([k, v]) => ({ key: k, val: v }));
              commentBody += formatModuleDiff("Removed", id, { removed });
            }

            if (!commentBody) {
              console.log("No changes detected.");
              return;
            }

            // Post the comment
            const commitSha = process.env.GITHUB_SHA;
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha,
              body: commentBody
            });

            console.log('Diff comment posted successfully.');
