- name: Post categorized diff as commit comment
  uses: actions/github-script@v6
  with:
    github-token: ${{ secrets.GITHUB_TOKEN }}
    script: |
      const fs = require('fs');

      // Read previous and current JSON files
      const previous = JSON.parse(fs.readFileSync('previous.json', 'utf8'));
      const current = JSON.parse(fs.readFileSync('current.json', 'utf8'));

      const MAX_COMMENT_LENGTH = 65536;
      const header = (section) => `### ${section}\n\`\`\`diff\n`;
      const footer = '\n```\n';

      // Helpers
      function escapeLine(str) {
        return str.replace(/\r?\n/g, ' '); // flatten multiline for comment readability
      }

      // Track changes
      const added = [];
      const removed = [];
      const renamed = [];

      // Keys in previous and current
      const prevKeys = new Set(Object.keys(previous));
      const currKeys = new Set(Object.keys(current));

      // Find added keys
      for (const key of currKeys) {
        if (!prevKeys.has(key)) {
          added.push(`+ "${key}": ${JSON.stringify(current[key])}`);
        }
      }

      // Find removed keys
      for (const key of prevKeys) {
        if (!currKeys.has(key)) {
          removed.push(`- "${key}": ${JSON.stringify(previous[key])}`);
        }
      }

      // Find renamed/changed keys (present in both, value changed)
      for (const key of prevKeys) {
        if (currKeys.has(key)) {
          const prevVal = JSON.stringify(previous[key]);
          const currVal = JSON.stringify(current[key]);
          if (prevVal !== currVal) {
            renamed.push(
              `-original : ${key} : ${escapeLine(prevVal)}\n+renamed: ${key} : ${escapeLine(currVal)}`
            );
          }
        }
      }

      // Compose full comment sections
      const sections = [];

      if (added.length) {
        sections.push({title: 'Added', content: added.join('\n')});
      }
      if (removed.length) {
        sections.push({title: 'Removed', content: removed.join('\n')});
      }
      if (renamed.length) {
        sections.push({title: 'Renamed', content: renamed.join('\n\n')});
      }

      if (sections.length === 0) {
        console.log('No changes to post');
        return;
      }

      // Split large sections into multiple comments if needed
      const comments = [];
      for (const {title, content} of sections) {
        const baseHeader = `ðŸ§© **Changes in \`discordclasses.json\` - ${title}:**\n\n`;
        const maxContentLength = MAX_COMMENT_LENGTH - baseHeader.length - header(title).length - footer.length;

        // Split content into chunks respecting line breaks
        const lines = content.split('\n');
        let chunk = '';
        for (const line of lines) {
          if ((chunk + line + '\n').length > maxContentLength) {
            comments.push(baseHeader + header(title) + chunk + footer);
            chunk = '';
          }
          chunk += line + '\n';
        }
        if (chunk.length > 0) {
          comments.push(baseHeader + header(title) + chunk + footer);
        }
      }

      // Post comments sequentially
      for (let i = 0; i < comments.length; i++) {
        await github.rest.repos.createCommitComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          commit_sha: context.sha,
          body: comments[i],
        });
        console.log(`Posted comment ${i + 1} of ${comments.length}`);
      }
